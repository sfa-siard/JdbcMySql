<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- build.xml =========================================================
ANT build file of JdbcMySql
Application: SIARD Suite 2.1
Description: ANT build file of JdbcMySql
Platform   : JAVA, ANT
========================================================================
Copyright  : 2016, Enter AG, RÃ¼ti ZH, Switzerland
Created    : 09.05.2016, Hartwig Thomas
==================================================================== -->
<project basedir="." default="build" name="jdbcmysql">
  <!-- build properties contain local settings. They must reside in
	   the same folder as this build.xml. Use build.properties.template
	   as a guide for creating the local copy.
  -->
  <property file="build.properties"/>
  <property name="debuglevel" value="source,lines,vars"/>
  <property name="target" value="1.8"/>
  <property name="source" value="1.8"/>
  <!-- the main folders of the project -->
  <property name="dirsrc" value="src"/>
  <property name="dirtest" value="test/"/>
  <property name="dirlib" value="lib"/>
  <property name="dirdoc" value="doc"/>
  <property name="diretc" value="etc"/>
  <property name="dirtmp" value="tmp"/>
  <property name="dirdist" value="dist"/>

  <!-- enterutils jar -->
  <property name="jarenterutils" value="enterutils.jar"/>
  <property name="cpenterutils" value="${direnterutils}/${dirdist}/${jarenterutils}"/> 
  <!-- sqlparser jar -->
  <property name="jarsqlparser" value="sqlparser.jar"/>
  <property name="cpsqlparser" value="${dirlib}/${jarsqlparser}"/> 
  <!-- antlr 4 jar -->
  <property name="jarantlr4runtime" value="antlr-runtime-4.5.2.jar"/>
  <property name="cpantlr" value="${direnterutils}/${dirlib}/${jarantlr4runtime}"/>
  <!-- jdbcbase jars -->
  <property name="jarjdbcbase" value="jdbcbase.jar"/>
  <property name="jarjdbcbasetest" value="jdbcbase-test.jar"/>
  <property name="cpjdbcbase" value="${dirlib}/${jarjdbcbase}"/> 
  <property name="cpjdbcbase-test" value="${dirlib}/${jarjdbcbase};${dirlib}/${jarjdbcbasetest}"/>
  <!-- MYSQL JDBC jars -->
  <property name="jarmysqljdbc" value="mysql-connector-java-8.0.18.jar"/>
  <property name="jarjts" value="jts-1.14.jar"/>
  <property name="cpmysqljdbc" value="${dirlib}/${jarmysqljdbc};${dirlib}/${jarjts}"/> 
  <!-- junit -->
	<property name="jarhamcrest" value="hamcrest-core-1.3.jar"/>
	<property name="jarjunit4" value="junit-4.12.jar"/>
  <property name="cpjunit" value="${dirlib}/${jarhamcrest};${dirlib}/${jarjunit4}"/>

  <!-- delete build folders -->
  <property name="dirbuild" value="build"/>
  <property name="dirbuildclasses" value="${dirbuild}/classes"/>
  <property name="dirbuildtests" value="${dirbuild}/tests"/>
  <target name="clean">
    <echo message="${ant.project.name}: clean"/>
    <delete dir="${dirbuildclasses}"/>
    <delete dir="${dirbuildtests}"/>
    <delete dir="${dirtmp}"/>
    <delete dir="${dirdist}"/>
  </target>
  
  <!-- create build folders -->
  <target name="init" depends="clean">
    <echo message="${ant.project.name}: init"/>
    <mkdir dir="${dirbuild}"/>
    <mkdir dir="${dirbuildclasses}"/>
    <mkdir dir="${dirbuildtests}"/>
    <mkdir dir="${dirtmp}"/>
    <mkdir dir="${dirdist}"/>
  </target>
  
  <!-- check if mainfest and local build properties are available -->
  <property name="filemanifest" value="src/main/resources/META-INF/MANIFEST.MF"/>
  <property name="filerevoldproperties" value="${dirtmp}/revold.properties"/>
  <property name="filegithead" value=".git/HEAD"/>
  <property name="filebranchproperties" value="${dirtmp}/branch.properties"/>
  <target name="check">
    <!-- get current date -->
    <tstamp>
      <format property="builtdate" pattern="dd. MMM yyyy" locale="en,CH"/>
    </tstamp>
    <echo message="builddate: ${builtdate}"/>
    <!-- current version and revision are taken from manifest -->
    <copy file="${filemanifest}" tofile="${filerevoldproperties}"/>
    <!-- reduce it to version and revision properties --> 
    <replaceregexp file="${filerevoldproperties}" 
      match=".*Implementation-Version: (\d+\.\d+)\.(\d+).*" 
      replace="version=\1&#x000A;revold=\2"
      flags="gms"/>
    <!-- load the properties -->
    <property file="${filerevoldproperties}"/>
    <echo message="version: ${version}"/>
    <echo message="revold: ${revold}"/>
    <!-- fail if build.properties are not configured -->
    <fail  message="External build.properties not configured correctly!">
      <condition>
        <not>
          <and>
            <isset property="version"/>
            <isset property="revold"/>
            <isset property="java8rtjar"/>
          </and>
        </not>
      </condition>
    </fail>
    <!-- check .git/HEAD for active branch name -->
    <copy file="${filegithead}" tofile="${filebranchproperties}"/>
    <!-- reduce it to branch property -->
    <replaceregexp file="${filebranchproperties}" 
      match="^ref: refs/heads/(.*)$" 
      replace="branch=\1"
      flags="gms"/>
    <!-- load the property -->
    <property file="${filebranchproperties}"/>
    <!-- compute branch.master -->
    <condition property="branch.master">
    	<and>
    	  <not><isset property="submit"/></not> 
        <equals arg1="${branch}" arg2="master"/>
    	</and>
    </condition>
    <echo message="branch: ${branch}"/>
    <echo message="branch.master: ${branch.master}"/>
    <echo message="build.properties.configured: ${build.properties.configured}"/>
  </target>
  
  <!-- increment revision and update manifest -->
  <property name="filerevisionproperties" value="${dirtmp}/revision.properties"/> 
  <target name="revision" depends="check">
    <echo message="${ant.project.name}: revision"/>
    <copy file="${filerevoldproperties}" tofile="${filerevisionproperties}" overwrite="true"/>
    <replaceregexp file="${filerevisionproperties}" 
      match="^revold=(.*)$" 
      replace="revision=\1"
      flags="gm"/>
    <propertyfile file="${filerevisionproperties}">
      <entry key="revision" type="int" operation="+" value="1"/>
    </propertyfile>
    <property file="${filerevisionproperties}"/>
    <echo message="revision: ${revision}" />
    <replaceregexp file="${filemanifest}" 
      match="^Implementation-Version: .*$" 
      replace="Implementation-Version: ${version}.${revision}"
      flags="gm"/>
    <replaceregexp file="${filemanifest}" 
      match="^Built-Date: .*$" 
      replace="Built-Date: ${builtdate}"
      flags="gm"/>
  </target>
  
  <!-- build the JdbcMySql classes -->
  <target name="build" depends="init">
    <echo message="${ant.project.name}: build"/>
    <!-- without this, the package-info class is not generated! -->
    <touch>
      <fileset dir="${dirsrc}" includes="**/*.*"/>
    </touch>
    <javac debug="true" debuglevel="${debuglevel}"
      includeantruntime="false"
      bootclasspath="${java8rtjar}"
      source="${source}" 
      target="${target}"
      encoding="UTF-8"
      classpath="${cpmysqljdbc};${cpjdbcbase};${cpsqlparser};${cpenterutils}"
      srcdir="${dirsrc}"
      destdir="${dirbuildclasses}">
    </javac>
  </target>

  <property name="jarfile" value="${ant.project.name}.jar"/>
  <target name="jar-test" depends="build">
    <echo message="${ant.project.name}: jar"/>
    <jar jarfile="${dirdist}/${jarfile}">
      <fileset dir="${dirbuildclasses}">
        <include name="**/*.class"/>
        <include name="**/res/*.*"/>
      </fileset>
    </jar>
  </target>
  
  <!-- create the JAR file containing all classes -->
  <property name="jarfile" value="${ant.project.name}.jar"/>
  <target name="jar" depends="revision, test">
    <echo message="${ant.project.name}: jar"/>
    <jar jarfile="${dirdist}/${jarfile}" manifest="${filemanifest}">
      <fileset dir="${dirbuildclasses}">
        <include name="**/*.class"/>
        <include name="**/res/*.*"/>
      </fileset>
    </jar>
  </target>
	
	<!-- create and run all tests -->
  <property name="classdatasourcetester" value="ch.admin.bar.siard2.jdbcx.MySqlDataSourceTester"/>
  <property name="filedatasourcetest" value="datasource-test"/>
  <property name="classjdbctestsuite" value="ch.admin.bar.siard2.jdbc._MySqlJdbcTestSuite"/>
  <property name="filejdbctests" value="jdbc-tests"/>
	<target name="test" depends="jar-test" if="dbuser">
    <echo message="${ant.project.name}: tests"/>
		<!-- build the tests -->
    <javac debug="true" debuglevel="${debuglevel}"
      includeantruntime="false"
      bootclasspath="${java8rtjar}"
      source="${source}" 
      target="${target}"
      encoding="UTF-8"
      srcdir="${dirtest}"
      destdir="${dirbuildtests}">
      <classpath>
        <pathelement path="${dirdist}/${jarfile}"/>
        <pathelement path="${cpmysqljdbc}"/>
        <pathelement path="${cpjdbcbase-test}"/>
        <pathelement path="${cpsqlparser}"/>
        <pathelement path="${cpenterutils}"/>
        <pathelement path="${cpantlr}}"/>
        <pathelement path="${cpjunit}"/>
      </classpath>
    </javac>
    <junit haltonerror="true" haltonfailure="true" fork="true" printsummary="on" dir="${basedir}">
      <sysproperty key="java.util.logging.config.file" value="${diretc}/debug.properties"/>
      <formatter type="plain"/>
      <classpath>
        <pathelement path="${dirbuildtests}"/>
        <pathelement path="${dirdist}/${jarfile}"/>
        <pathelement path="${cpmysqljdbc}"/>
        <pathelement path="${cpjdbcbase-test}"/>
        <pathelement path="${cpsqlparser}"/>
        <pathelement path="${cpenterutils}"/>
        <pathelement path="${cpantlr}}"/>
        <pathelement path="${cpjunit}"/>
      </classpath>
      <test 
      name="${classdatasourcetester}"
      outfile="${filedatasourcetest}"
      todir="${dirtmp}"/>
    </junit>
    <junit haltonerror="true" haltonfailure="true" fork="true" printsummary="on" dir="${basedir}" showoutput="yes">
      <sysproperty key="java.util.logging.config.file" value="${diretc}/debug.properties"/>
      <formatter type="plain"/>
      <classpath>
        <pathelement path="${dirbuildtests}"/>
        <pathelement path="${dirdist}/${jarfile}"/>
        <pathelement path="${cpmysqljdbc}"/>
        <pathelement path="${cpjdbcbase-test}"/>
        <pathelement path="${cpsqlparser}"/>
        <pathelement path="${cpenterutils}"/>
        <pathelement path="${cpantlr}"/>
        <pathelement path="${cpjunit}"/>
      </classpath>
      <test 
      name="${classjdbctestsuite}"
      outfile="${filejdbctests}"
      todir="${dirtmp}"/>
    </junit>
  </target>
  
  <!-- create the JAR file containing all tests -->
  <property name="jartest" value="${ant.project.name}-test.jar"/>
  <target name="jar-with-all-tests" depends="test,revision" if="dbuser">
    <echo message="${ant.project.name}: jar"/>
    <jar jarfile="${dirdist}/${jartest}"
         manifest="${filemanifest}">
      <fileset dir="${dirbuildtests}">
        <include name="**/*.class"/>
        <include name="**/res/*.*"/>
      </fileset>
    </jar>
  </target>
  
  <!-- create the ZIP file with binaries for Windows and LINUX -->
  <target name="release" depends="jar,jar-with-all-tests">
    <echo message="${ant.project.name}: zip"/>
    <zip zipfile="${dirdist}/${ant.project.name}-${version}.${revision}.zip">
      <zipfileset dir="${dirdist}" prefix="${ant.project.name}/${dirlib}">
        <include name="*.jar"/>
        <exclude name="*-test.jar"/>
      </zipfileset>
      <zipfileset dir="${dirlib}" prefix="${ant.project.name}/${dirlib}">
        <exclude name="*-test.jar"/>
      	<exclude name="${jarhamcrest}"/>
      	<exclude name="${jarjunit4}"/>
      </zipfileset>
      <zipfileset dir="${dirdoc}" prefix="${ant.project.name}/${dirdoc}">
        <include name="**/*.*"/>
        <exclude name="developer/**/*.*"/>
      </zipfileset>
      <zipfileset dir="${diretc}" prefix="${ant.project.name}/${diretc}">
        <exclude name="debug.properties"/>
      </zipfileset>
      <zipfileset dir="." prefix="${ant.project.name}">
        <include name="*.txt"/>
      </zipfileset>
    </zip>
  </target>
  
  <!-- deploy to file system -->
  <target name="deploy" if="dirdeploy">
    <echo message="${ant.project.name}: deploy"/>
    <delete dir="${dirdeploy}/${ant.project.name}"/>
    <unzip dest="${dirdeploy}" src="${dirdist}/${ant.project.name}-${version}.${revision}.zip" />
  </target>

  <target name="copy-dependencies" depends="check">
    <echo message="Copy jar files from dependency projects on local file system"/>
    <copy file="../EnterUtilities/dist/enterutils.jar" todir="${dirlib}" failonerror="false" overwrite="true"/>
    <copy file="../SqlParser/dist/sqlparser.jar" todir="${dirlib}" failonerror="false" overwrite="true"/>
    <copy file="../JdbcBase/dist/jdbcbase.jar" todir="${dirlib}" failonerror="false" overwrite="true"/>
    <copy file="../JdbcBase/dist/jdbcbase-test.jar" todir="${dirlib}" failonerror="false" overwrite="true"/>
  </target>
  
</project>
